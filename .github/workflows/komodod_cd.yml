name: Komodo build releases

on:
  push:
    branches:
    - dev

jobs:
  linux-build:
    name: linux-build
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: docker.pkg.github.com/meshbits/komodo/komodobuild_linux:0.1
      CONTAINER_NAME: komodobuild_linux
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Shortify commit sha
        shell: bash
        run: echo "##[set-output name=sha_short;]$(echo ${GITHUB_SHA::7})"
        id: shortify_commit

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.ns408_packages_token }}

      - name: Pull Docker image
        run: |
          docker pull ${{ env.IMAGE_REPO }}

      - name: Run image
        run: |
          nproc=$(cat /proc/cpuinfo | grep processor | wc -l)
          docker run -it -d --name ${{ env.CONTAINER_NAME }} -v $GITHUB_WORKSPACE:/workspace -w /workspace ${{ env.IMAGE_REPO }}
          docker exec -w /workspace ${{ env.CONTAINER_NAME }} ./zcutil/build.sh -j$(nproc)
          docker exec -w /workspace ${{ env.CONTAINER_NAME }} zip --junk-paths komodo-linux src/komodod src/komodo-cli

      - name: Upload komodo-linux.zip as artifact
        uses: actions/upload-artifact@v1
        with:
          name: komodo-linux
          path: ./komodo-linux.zip

  macOS-build:
    name: macOS-build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install deps (macOS)
        run: |
          brew update
          brew upgrade
          brew tap discoteq/discoteq; brew install flock
          brew install autoconf autogen automake binutils \
            gcc@8 protobuf coreutils wget python3
      - name: Build (macOS)
        run: |
          ./zcutil/build-mac.sh -j$(sysctl -n hw.ncpu)
          zip --junk-paths komodo-macOS src/komodod src/komodo-cli
      - name: Upload komodo-macOS.zip as artifact
        uses: actions/upload-artifact@v1
        with:
          name: komodo-macOS
          path: ./komodo-macOS.zip

  windows-build:
    name: windows-build (mingw)
    runs-on: ubuntu-20.04
    env:
      IMAGE_REPO: docker.pkg.github.com/meshbits/komodo/komodobuild_win:0.1
      CONTAINER_NAME: komodobuild_win

    steps:
      - uses: actions/checkout@v2

      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.ns408_packages_token }}

      - name: Pull Docker image
        run: |
          docker pull ${{ env.IMAGE_REPO }}

      - name: Run image
        run: |
          nproc=$(cat /proc/cpuinfo | grep processor | wc -l)
          docker run -it -d --name ${{ env.CONTAINER_NAME }} -v $GITHUB_WORKSPACE:/workspace -w /workspace ${{ env.IMAGE_REPO }}
          docker exec -w /workspace ${{ env.CONTAINER_NAME }} ./zcutil/build.sh -j$(nproc)
          docker exec -w /workspace ${{ env.CONTAINER_NAME }} zip --junk-paths komodo-linux src/komodod src/komodo-cli


      - name: Install deps (Windows)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update  # prevents repo404 errors on apt-remove below
          sudo apt-get remove php5.6-fpm php7.0-fpm php7.1-fpm php7.2-fpm php7.3-fpm php7.3-common php7.4-fpm
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool libncurses-dev unzip \
          clang libsodium-dev ncurses-dev git python3 python3-zmq curl mingw-w64 zlib1g-dev wget bsdmainutils automake \
          libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libqrencode-dev libdb++-dev ntp ntpdate \
          software-properties-common libevent-dev libcurl4-gnutls-dev cmake
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustup target add x86_64-pc-windows-gnu
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

          # Compile and install curl for mingw libs
          git clone https://github.com/curl/curl.git && cd curl
          ./buildconf && ./configure --build x86_64-pc-linux-gnu --host x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32
          make && sudo make install
      - name: Build (Windows)
        env:
          CC: /usr/bin/x86_64-w64-mingw32-gcc-posix
          CXX: /usr/bin/x86_64-w64-mingw32-g++-posix
        run: |
          ./zcutil/build-win-dtest.sh -j$(cat /proc/cpuinfo | grep processor | wc -l)
          zip --junk-paths komodo-win src/*.exe src/*.dll
      - name: Upload komodo-win.zip as artifact
        uses: actions/upload-artifact@v1
        with:
          name: komodo-win
          path: ./komodo-win.zip

  publish-release:
      name: Publishing CD releases
      runs-on: ubuntu-latest
      needs: [linux-build, macOS-build, windows-build]
      steps:
        - name: Download komodo-linux.zip
          uses: actions/download-artifact@v1
          with:
            name: komodo-linux
        - name: Download komodo-macOS.zip
          uses: actions/download-artifact@v1
          with:
            name: komodo-macOS
        - name: Download komodo-win.zip
          uses: actions/download-artifact@v1
          with:
            name: komodo-win

        - name: Extract branch name
          shell: bash
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          id: extract_branch

        - name: Shortify commit sha
          shell: bash
          run: echo "##[set-output name=sha_short;]$(echo ${GITHUB_SHA::7})"
          id: shortify_commit

        - name: Create Release
          id: create_release
          uses: actions/create-release@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: cd_release_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}
            release_name: CD Release ${{ steps.shortify_commit.outputs.sha_short }} ${{ steps.extract_branch.outputs.branch }}
            draft: false
            prerelease: true
        - name: Upload Linux Release Asset
          id: upload-linux-release-asset
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
            asset_path: komodo-linux/komodo-linux.zip
            asset_name: komodo_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_linux.zip
            asset_content_type: application/zip
        - name: Upload macOS Release Asset
          id: upload-macOS-release-asset
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
            asset_path: komodo-macOS/komodo-macOS.zip
            asset_name: komodo_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_macOS.zip
            asset_content_type: application/zip
        - name: Upload Windows Release Asset
          id: upload-windows-release-asset
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
            asset_path: komodo-win/komodo-win.zip
            asset_name: komodo_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_win.zip
            asset_content_type: application/zip
